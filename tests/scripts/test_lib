#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2019 Western Digital Corporation or its affiliates.
#

blkzone=$(type -p blkzone 2>/dev/null)

function drop_inode_cache()
{
	echo 2 > /proc/sys/vm/drop_caches
}

function devname()
{
	basename "$(realpath $1)"
}

function sysfs_max_active_seq_files()
{
	cat "/sys/fs/zonefs/$(devname $1)/max_active_seq_files"
}

function sysfs_nr_active_seq_files()
{
	cat "/sys/fs/zonefs/$(devname $1)/nr_active_seq_files"
}

function sysfs_max_wro_seq_files()
{
	cat "/sys/fs/zonefs/$(devname $1)/max_wro_seq_files"
}

function sysfs_nr_wro_seq_files()
{
	cat "/sys/fs/zonefs/$(devname $1)/nr_wro_seq_files"
}

function get_nr_zones()
{
	${blkzone} report "$1" | wc -l || exit 0
}

function get_nr_cnv_zones()
{
	${blkzone} report "$1" | grep -c "CONVENTIONAL" || exit 0
}

function get_nr_seq_zones()
{
	${blkzone} report "$1" | grep -c "SEQ_WRITE_" || exit 0
}

function get_zone_sectors()
{
	cat "/sys/class/block/$(devname $1)/queue/chunk_sectors"
}

function get_zone_append_max_bytes()
{
	cat "/sys/class/block/$(devname $1)/queue/zone_append_max_bytes"
}

function get_max_open_zones()
{
	local bdev="$(devname $1)"

	if [ -f "/sys/class/block/$bdev/queue/max_open_zones" ]; then
		cat "/sys/class/block/$bdev/queue/max_open_zones"
	else
		echo "0"
	fi
}

function get_max_active_zones()
{
	local bdev="$(devname $1)"

	if [ -f "/sys/class/block/$bdev/queue/max_active_zones" ]; then
		cat "/sys/class/block/$bdev/queue/max_active_zones"
	else
		echo "0"
	fi
}

function zone_info()
{
	${blkzone} report --count 1 --offset "$2" "$1" || exit 0
}

function zone_is_conventional()
{
	echo "$(zone_info $1 $2)" | grep -q "CONVENTIONAL" && return 0 || return 1
}

function zone_is_full()
{
	echo "$(zone_info $1 $2)" | grep -q "zcond:14(fu)" && return 0 || return 1
}

function blkzone_has_zone_capacity()
{
	echo "$(zone_info $1 0)" | grep -q "cap " && return 0 || return 1

}

function get_zone_capacity_sectors()
{
	c=$(echo "$(zone_info $1 $2)" | cut -d "," -f3 | cut -d" " -f3)
	echo $((c))
}

function get_zone_capacity_bytes()
{
	echo $(( $(get_zone_capacity_sectors "$1" "$2") * 512 ))
}

function get_total_zone_capacity_sectors()
{
	local total_cap=0

	# Skip the first zone as it contains the super block
	while read -r c_hex; do
		c=$((c_hex))
		total_cap=$(( total_cap + c ))
	done < <(blkzone report -o "$zone_sectors" "$1" | cut -d "," -f3 | cut -d" " -f3)

	echo $total_cap
}

function exit_skip()
{
	exit 2
}

function exit_failed()
{
	echo "$1"
	exit 1
}

function clear_sb()
{
	local nrcnv=$(get_nr_cnv_zones "$1")

	# Clear super block for -f tests
	if [ $nrcnv == 0 ]; then
		blkzone reset --offset 0 -c 1 "$1" ||
			(echo "Reset super block zone failed"; exit 1)
		# Resetting a zone does not clear the page cache of cached zone data
		# pages. Take a big hammer and clear the page cache to avoid access
		# to stale data.
		echo 1 > /proc/sys/vm/drop_caches
	else
		dd if=/dev/zero of="$1" bs=4096 oflag=direct count=1 ||
			(echo "Clear super block failed"; exit 1)
	fi
}

function zonefs_mkfs()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mkzonefs -f "${args[@]}" || \
		exit_failed " --> mkzonefs FAILED with arguments \"${args[*]}\""
}

function zonefs_mount()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mount -t zonefs "${args[@]}" "$zonefs_mntdir" || \
		exit_failed " --> mount FAILED with arguments \"${args[*]} $zonefs_mntdir\""
}

function zonefs_mount_err()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mount -t zonefs "${args[@]}" "$zonefs_mntdir" && \
		exit_failed " --> mount SUCCESS with arguments \"${args[*]} $zonefs_mntdir\" (should FAIL)"
}

function zonefs_umount()
{
	# Make sure udev is not looking at the FS
	udevadm settle >> /dev/null 2>&1

	umount "$zonefs_mntdir" || \
		exit_failed " --> umount FAILED"
}

function get_perm()
{
	stat -c "%a" "$1"
}

function check_file_perm()
{
	perm="$(get_perm "$1")"
        if [ "$perm" != "$2" ]; then
		echo "file $1: invalid permission $perm (expected $2)"
		exit 1
        fi
}

function check_perm()
{
	if [ -d "$zonefs_mntdir/cnv/" ]; then
		list=$(stat -c "%n %a" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fp=(${line})
			f=${fp[0]##*/}
			perm=${fp[1]}

			if [ "$perm" != "$1" ]; then
				echo "cnv file $f: invalid permission $perm (expected $1)"
				exit 1
			fi

		done <<< "$list"
	fi

	pushd "$zonefs_mntdir" > /dev/null 2>&1 || exit
	list=$(stat -c "%n %a" seq/[0-9]*)
	popd > /dev/null 2>&1 || exit
	while read -r line; do

		fp=(${line})
		f=${fp[0]##*/}
		perm=${fp[1]}

		if [ "$perm" != "$1" ]; then
			echo "seq file $f: invalid permission $perm (expected $1)"
			exit 1
		fi

	done <<< "$list"
}

function check_uid_gid()
{
	if [ -d "$zonefs_mntdir/cnv/" ]; then
		list=$(stat -c "%n %u %g" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fug=(${line})
			f=${fug[0]##*/}
			uid=${fug[1]}
			gid=${fug[2]}

			if [ "$uid" != "$1" ]; then
				echo "cnv file $f: invalid UID $uid (expected $1)"
				exit 1
			fi
			if [ "$gid" != "$2" ]; then
				echo "cnv file $f: invalid GID $gid (expected $2)"
				exit 1
			fi

		done <<< "$list"
	fi

	pushd "$zonefs_mntdir" > /dev/null 2>&1 || exit
	list=$(stat -c "%n %u %g" seq/[0-9]*)
	popd > /dev/null 2>&1 || exit
	while read -r line; do

		fug=(${line})
		f=${fug[0]##*/}
		uid=${fug[1]}
		gid=${fug[2]}

		if [ "$uid" != "$1" ]; then
			echo "seq file $f: invalid UID $uid (expected $1)"
			exit 1
		fi
		if [ "$gid" != "$2" ]; then
			echo "seq file $f: invalid GID $gid (expected $2)"
			exit 1
		fi

	done <<< "$list"
}

function file_size()
{
	stat -c "%s" "$1"
}

function file_max_size()
{
	nr_blocks=$(stat -c "%b" "$1")
	block_size=$(stat -c "%B" "$1")
	echo "$(( nr_blocks * block_size ))"
}

function aggr_cnv_size()
{
	size=$(file_max_size "$zonefs_mntdir"/cnv/0)
	two_zones_size=$((zone_sectors * 2 * 512))

	if $short && ((two_zones_size < size)); then
		size="${two_zones_size}"
	fi

	echo "${size}"
}

function check_size()
{
	aggr_cnv=$1

	if [ -d "$zonefs_mntdir/cnv/" ]; then
		# Note: conventional zone capacity is always equal to the zone size
		if $aggr_cnv; then
			expected_sz=$(( zone_bytes * (nr_cnv_zones - 1) ))
		else
			expected_sz=$zone_bytes
		fi

		list=$(stat -c "%n %s" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fsz=(${line})
			f=${fsz[0]##*/}
			sz=${fsz[1]}

			if [ "$sz" != "$expected_sz" ]; then
				echo "cnv file $f: invalid size $sz B (expected $expected_sz B)"
				exit 1
			fi

		done <<< "$list"
	fi

	pushd "$zonefs_mntdir" > /dev/null 2>&1 || exit
	list=$(stat -c "%n %s" seq/[0-9]*)
	popd > /dev/null 2>&1 || exit
	while read -r line; do

		fsz=(${line})
		f=${fsz[0]##*/}
		sz=${fsz[1]}

		if [ "$sz" != "0" ]; then
			echo "seq file $f: invalid size $sz B (expected 0 B)"
			exit 1
		fi

	done <<< "$list"
}

function create_nullb()
{
	local n=0

	modprobe null_blk nr_devices=0

	while [ 1 ]; do
		if [ ! -b "/dev/nullb$n" ]; then
			break
		fi
		n=$(( n + 1 ))
	done

	mkdir /sys/kernel/config/nullb/nullb$n
	echo 0 > /sys/kernel/config/nullb/nullb$n/zoned
	echo 1 > /sys/kernel/config/nullb/nullb$n/power

	echo "$n"
}

function destroy_nullb()
{
        local n=$1

	echo 0 > /sys/kernel/config/nullb/nullb$n/power
	rmdir /sys/kernel/config/nullb/nullb$n

	rmmod null_blk >> /dev/null 2>&1
}

function file_number()
{
        stat -f -c "%c" "$1"
}

function block_number()
{
        stat -f -c "%b" "$1"
}

function block_size()
{
        stat -f -c "%S" "$1"
}

function require_program()
{
	type -p "$1" 2> /dev/null || exit_skip
}

function require_cnv_files()
{
	[[ ${nr_cnv_files} -ne 0 ]] || exit_skip
}

function require_sysfs()
{
	[[ ${zonefs_has_sysfs} -eq 1 ]] || exit_skip
}

function min()
{
	local a=$1
	local b=$2

	echo $((a < b ? a : b))
}

function max()
{
	local a=$1
	local b=$2

	echo $((a > b ? a : b))
}
